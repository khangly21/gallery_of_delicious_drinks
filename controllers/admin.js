const mongoose=require('mongoose'); //What is this doing?

const fileHelper= require('../util/file');

const Product = require('../models/product');

const {GridFsStorage}= require('multer-gridfs-storage');
Grid=require('gridfs-stream');
//MONGODB_URI v·ªõi c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c Express app ƒë·ªçc t·ª´ b√™n ngo√†i (file nodemon.json khi dev env)
const MONGODB_URI =`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@khangserver0.w0azxjp.mongodb.net/${process.env.MONGO_DEFAULT_DATABASE}`;
const promise=mongoose.connect(MONGODB_URI, { useNewUrlParser: true });
const conn = mongoose.connection;
let gfs,gridfsBucket;
conn.once('open',()=>{
  console.log(`MongoDB connection is opened to database ${process.env.MONGO_DEFAULT_DATABASE}`);
  //conn.db is mongodb.Db instance, set when the connection is opened
  
  gfs=Grid(conn.db,mongoose.mongo); 
  gfs.collection('tailenhinhanh');


  //THI·∫æU ANH N√ÄY l√† gfs.files.find() kh√¥ng t√¨m ra array n√†y, tr·∫£ chu·ªói json "No files exists OR no file in array"
  gridfsBucket = new mongoose.mongo.GridFSBucket(conn.db, {
      bucketName: 'tailenhinhanh' //l√∫c n√†y ch∆∞a th·∫•y collection "tailenhinhanh" trong MongoDB. Bucket name ph·∫£i matches v·ªõi collection name
  });
});


//Destructure ‚ÄòvalidationResult‚Äô function from express-validator to use it to find any errors.
const {validationResult}=require('express-validator/check'); //ch√∫ √Ω, trong route th√¨ v·∫ø tr√°i ƒë·∫∑t l√† {body} ƒë·ªÉ validate c√°c fields trong req.body

exports.getAddProduct = (req, res, next) => {
  res.render('admin/edit-product', {
    pageTitle: 'Add Product',
    path: '/admin/add-product',
    editing: false,
    hasError:false,
    errorMessage:null,
    validationErrors:[]
  });
};

exports.postAddProduct = (req, res, next) => {
  //Note: multer t·∫°o ra body object (ch·ª©a c√°c d·ªØ li·ªáu text) v√† file/files object (ch·ª©a c√°c d·ªØ li·ªáu file). T·∫•t c·∫£ ƒë∆∞·ª£c g·∫Øn v√†o req object. Do ƒë√≥ c√≥ req.body v√† req.file hay req.files 
  //const phan_than_yeu_cau=req.body; //l√Ω do l√†  v·∫ø ph·∫£i kh√¥ng ƒë∆∞·ª£c d·∫•u ".", nh∆∞ng d√πng spreadOperator

  // we are extracting data from the incoming requests, l∆∞u √Ω req.body ch·ª©a bi·∫øn c√≥ t√™n c·ªßa input
  const {title,price,description}={...req.body};  //c√°ch vi·∫øt 1 n√†y nh√¨n kh√≥ hi·ªÉu, nh∆∞ng v·∫´n ra KQ
  //tr∆∞·ªõc khi t·ªõi ƒë∆∞·ª£c controller n√†y, th√¨ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u trong MongoDB b·ªüi middleware router.post('/add-product', upload.single('image')
     ///üëâ Problem: https://stackoverflow.com/questions/9821499/how-to-query-for-files-in-gridfs-and-return-only-the-last-uploaded-version
     /// Solution: Th·ª≠ tr√≠ch ph·∫ßn t·ª≠ cu·ªëi c√πng v·ªõi gfs.files.find().toArray((err,files)=>{
  
  console.log("gfs.files : ",gfs.files);
  console.log("gfs.chunks : ",gfs.chunks);
  console.log("gridfsBucket.files : ",gridfsBucket.files);
  
  //see the latest updated MongoDB GridFS:üëâ https://www.mongodb.com/docs/drivers/node/current/fundamentals/gridfs/
  
  const cursor = gridfsBucket.find({}); //TR·∫¢ V·ªÄ CURSOR
  console.log("C√≥ t·∫•t c·∫£: ", cursor.length) //undefined
  //üéÅSOLUTION ƒë·∫øm s·ªë ph·∫ßn t·ª≠ c·ªßa cursor: https://www.mongodb.com/docs/manual/reference/method/cursor.count/
  console.log("C√≥ t·∫•t c·∫£: ", cursor.count()," ph·∫ßn t·ª≠");
  cursor.count().then(number=>console.log("CURSOR.COUNT() th·∫•y c√≥ t·∫•t c·∫£: ", number," ph·∫ßn t·ª≠"))
  cursor.forEach(file_metadata =>{
    console.log("MY DOC:",file_metadata)
  });
  console.log("The last doc is: ",cursor[cursor.length-1]); //undefined
  const cursor2 = gridfsBucket.find({}).sort({_id:-1}).limit(1)
  console.log("cursor2",cursor2.filename);//undefined
  //console.log("Last doc: ", cursor.sort({"_id":-1}).limit(1))
  //MongoError: Cursor is closed https://www.mongodb.com/docs/manual/reference/method/cursor.close/
    ///https://stackoverflow.com/questions/12098815/mongodb-sort-order-on-id
    ///https://www.tutorialspoint.com/mongodb-query-to-find-last-object-in-collection
  //https://www.mongodb.com/docs/manual/reference/method/js-cursor/
   

  gfs.files.find().toArray((err,files)=>{
      if(!files || files.length === 0){
          return res.status(404).json({
              err:"No files exists OR no file in array"
          });
          //Error ·ªü ch·ªó: n·∫øu !files th√¨ return v√† nh·∫≠n ƒë∆∞·ª£c {"err":"No files exists OR no file in array"}
              ///nh∆∞ng return n√†y kh√¥ng l√†m tho√°t controller, n√™n s·∫Ω ti·∫øp t·ª•c create product v√† res.redirect('/admin/products');
              //N√™n b√°o l·ªói ch·ªó res.redirect: Cannot set headers after they are sent to the client
      }

      console.log("m·∫£ng files l√†: ",files);

      //express validators
  const errors=validationResult(req);   //VALIDATION ERROR COLLECTING üß†

  //if there is error, VALIDATION ERROR RETURNING  üß†
  if(!errors.isEmpty()) { //CH√ö √ù: errors kh√¥ng l√† m·∫£ng v√† isEmpty() kh√¥ng l√† native function c·ªßa m·∫£ng
    //console.log("postAddProduct errors in fields:\n",errors.array());
    //I render the view again (re-render)
    //validation-failed responses
    return res.status(422).render('admin/edit-product', {
        pageTitle: 'Add Product',
        path: '/admin/add-product',
        editing: false, //we are not editing product
        
        //do postAddProduct c√≥ bi·∫øn product2 n√™n postEditProduct ph·∫£i c√≥
        product2:{title,price,description}, //g√°n destructured object v√†o bi·∫øn product2. Ch√∫ √Ω ph√≠a tr√™n l√† g√°n literal object v√†o product1
        hasError:true,  // postAddProduct with hasError=true, that simply means that I should ensure that hasError=false is also set in other places where I render this page, like in getAddProduct,getEditProduct
        errorMessage:errors.array()[0].msg, //defalt error msg l√† 'Invalid value'
        validationErrors:errors.array()
    });
  } 

  const image=req.file; //m·ªói upload h√¨nh t∆∞∆°ng ·ª©ng req ri√™ng r·∫Ω
  console.log("req.file l√†: ",image); //c√≥ ch·ª©a filename l√† s·∫£n ph·∫©m c·ªßa multer gridfs lu√¥n, do ƒë√≥ kh√¥ng c·∫ßn y√™u c·∫ßu cursor t√¨m cho ra SP v·ª´a post l·∫ßn cu·ªëi l√† g√¨
  console.log("req.file cho bi·∫øt filename c·ªßa h√¨nh t∆∞∆°ng ·ª©ng, t·ª´ ƒë√≥ c√≥ th·ªÉ l√† nguy√™n li·ªáu cho EJS ƒë·ªÉ gh√©p v√†o URL ƒë·ªÉ c√≥ binary data cho v√†o img HTML tag: ",image.filename)

  //g·ªçi Class function ƒë·ªÉ t·∫°o instance m·ªõi
  const product = new Product({
        title: title,
        price: price,
        description: description,
        imageFilename: image.filename, //l·∫•y filename trong MongoDB, database healthyproducts, ƒë·ªÉ ƒë∆∞a t·ªõi view hi·ªÉn th·ªã img href="/admin/images/filename"
        userId: req.user  //s·∫Ω ch·ªâ tr√≠ch id c·ªßa user th√¥i
  });

  product
      .save() //Hi·ªÉn th·ªã ƒë∆∞·ª£c v√† CSDL L∆∞u ƒë∆∞·ª£c product c√≥ imageUrl:"public\uploads\hinh\image-21-8-2022-EBADF error.PNG"
      .then(result => {
        // console.log(result); //undefined
        console.log('Created Product on MongoDB');
        return res.redirect('/admin/products'); //the point is: C√≥ c·∫ßn m·∫£ng products ƒë·ªÉ g·ª≠i cho view 'admin/products' kh√¥ng?? Kh√¥ng v√¨ ƒëang y√™u c·∫ßu client g·ªçi http://localhost:3000/admin/add-product ƒë∆∞·ª£c x·ª≠ l√Ω logic b·ªüi exports.getProducts controller action , which send server information 'products' to view 
                                      
      })
      .catch(err => {
          console.log("OH, I HAVE CAUGHT AN ERROR: \n",err); 
          return res.redirect('/500');
      });
      
  })
  
  
  
  
};

//Sec13 - 216/Updating products
//First, getEditProduct shoud load a product to form with /:productId

//c√°ch l√†m c≈©ng nh∆∞ postAddProduct
exports.getEditProduct = (req, res, next) => {
  const editMode = req.query.edit;
  if (!editMode) {
    //kh√°c true
    return res.redirect('/');
  }

  //the popular req.params nh·∫±m tr√≠ch productId t·ª´ '/admin/edit-product/:productId'
  const prodId = req.params.productId;

  console.log("prodId c·ªßa getEditProduct:\n", prodId);//ok sau khi nh·∫•n n√∫t Edit

  //t·ª´ ƒë√≥ t√¨m ra product 
  Product.findById(prodId)
    .then(product => {
      if (!product) {
        return res.redirect('/');
      }

      //re-render view 'admin/edit-product', nh∆∞ng l·∫ßn n√†y kh√¥ng c√≥ /:productId so v·ªõi trong admin>>products.ejs hay /admin/products r·ªìi nh·∫•n n√∫t Edit
      res.render('admin/edit-product', {
        pageTitle: 'Edit Product',
        path: '/admin/edit-product',  //ch·ªâ ƒë·ªÉ CSS hightlight menu
        editing: editMode,
        //product: product, //ok, kh√¥ng b√°o l·ªói CastError: Cast to ObjectIf failed for value "" (type string) at path "_id" for model "Product", do g√°n ƒë∆∞·ª£c product._id v√†o view
        product2:product,  //editing=false th√¨ ch∆∞a submit product2._id; nh∆∞ng v·∫´n g√°n v√†o n·∫øu kh√¥ng view b√°o l·ªói
        hasError:false,
        errorMessage:null,
        validationErrors:[] // because we have no errors here when we just get the page, here we do not collect errors
      });
    })
    .catch(err => console.log(err));
};

exports.postEditProduct = (req, res, next) => {
  //Nh·∫≠n th√¥ng tin t·ª´ body object v√† file object c·ªßa multer middleware
  //L√†m object destructuring th√¨ kh√≥ ki·ªÉm so√°t
  const productId= req.body.productId        //ƒë√¢y l√† hidden input c√≥ name="productId"
  const updatedTitle= req.body.title         // field name="title"
  const updatedPrice= req.body.price         // field name="price" 
  const updatedDesc= req.body.description          // field name="description" 
  console.log("productId,updatedTitle,updatedPrice,updatedDesc:",productId,updatedTitle,updatedPrice,updatedDesc);//c√≥ ph·∫£i t·∫•t c·∫£ undefined n·∫øu kh√¥ng edit anh n√†o?? Kh√¥ng v√¨ ch√∫ng c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh r·ªìi


  const image=req.file; //c√≥ th·ªÉ undefined 
  console.log("req.file m√† postEditProduct nh·∫≠n ƒë∆∞·ª£c l√†: ",req.file);//undefined n·∫øu kh√¥ng edit h√¨nh, ch·ªâ edit c√°c th√¥ng tin c√≤n l·∫°i
  //Tuy nhi√™n khi edit, kh√¥ng ph·∫£i l√∫c n√†o incoming req c≈©ng mang req.file v√¨ kh√¥ng c√≥ h√¨nh m·∫∑c ƒë·ªãnh ƒë·ªÉ truy·ªÅn l√™n
      /// VD khi mu·ªën edit t√™n SP th√¥i, c√≤n image th√¨ gi·ªØ nguy√™n h√¨nh. L√∫c ƒë√≥ image aka req.file s·∫Ω undefine 
      /// S·∫Ω ·∫£nh h∆∞·ªüng product.imageFilename = image.filename;  v·ªõi b√°o l·ªói failed reading undefined (reading filename)

  console.log("prodId l√†: \n",productId);// undefined l√† do extract sai input name? th·ª±c ra l√† do c√°c input fields g·ª≠i d·ªØ li·ªáu xong l√† undefined h·∫øt v√¨ thi·∫øu upload.single('image') b√™n trong router

  const errors=validationResult(req);   //VALIDATION ERROR COLLECTING üß†

  //N·∫æU C√ì L·ªñI X√ÅC TH·ª∞C, S·∫º B·ªä T·ªöI TRANG http://localhost:5000/admin/edit-product V·ªöI VIEW "admin/edit-product"
  //if there is error, VALIDATION ERROR RETURNING  üß† , n√≥i c√°ch kh√°c l√† re-render 'admin/edit-product'
  if(!errors.isEmpty()) {
      console.log("fetching postEditProduct errors in fields:\n",errors.array()); //Demo kh√¥ng ghi g√¨ m√† submit, th√¨ m·∫£ng ch·ª©a c√°c ph·∫ßn t·ª≠ value:undefined , v√† msg:"Invalid value" hi·ªán tr√™n trang web lu√¥n
       
      //t·ª´ view 'admin/edit-product' c·ªßa getEditProduct nh·∫•n Edit m√† b·ªã validation error th√¨ ph·∫£i re-render 'admin/edit-product'
      //validation-failed responses
      return res.render('admin/edit-product', { //re-render
            pageTitle: 'Edit Product',
            path: '/admin/edit-product',
            editing: true, //we are editing product
            product2:{productId,updatedTitle,updatedPrice,updatedDesc},
            hasError:true,  // postEditProduct with hasError=true, that simply means that I should ensure that hasError=false is also set in other places where I render this page, like in getAddProduct,getEditProduct
            errorMessage:errors.array()[0].msg, //default error msg l√† 'Invalid value' khi missing m·ªôt field n√†o ƒë√≥, c≈©ng gi·ªëng nh∆∞ mongoose model validator kh√¥ng cho missing thu·ªôc t√≠nh n√†o trong schema
            validationErrors:errors.array()
      });
  }

  //Ok i have passed validation!
  //D√πng productId ƒë·ªÉ load model product th·ªèa ƒëi·ªÅu ki·ªán, sau ƒë√≥ save() th√¨ If you load an existing document from the database and modify it, save() updates the existing document instead
  
  //Mongoose (but not mongo) can accept object Ids as strings and "cast" them properly for you
  //Khi postEditProduct hay g·∫∑p 2 l·ªói ch√≠nh
      ///"Invalid value" nghƒ©a l√† description c√≥ l∆∞·ª£ng t·ª´ v∆∞·ª£t qu√°, n√™n expess-validation  m·∫∑c ƒë·ªãnh b√°o l·ªói
      /// üí¢ Cast Error: 
         ////üçí Solution1:  Product.findById(mongoose.Types.ObjectId(productId)) (https://stackoverflow.com/questions/17223517/mongoose-casterror-cast-to-objectid-failed-for-value-object-object-at-path)
         ////üçí Solution2:  B·ªè lu√¥n expressValidator cho "description", l√∫c n√†y ch·∫°y t·ªët v·ªõi Product.findById(productId)


  Product.findById(mongoose.Types.ObjectId(productId))
      .then(product => {
              if (product.userId.toString() !== req.user._id.toString()) {
                return res.redirect('/');
              }
              //d√πng gfs t√¨m tailenhinhanh.files ra h√¨nh n√†o c√≥ thu·ªôc t√≠nh filename l√† product.imageFilename, t∆∞∆°ng t·ª± l√∫c Delete h√¨nh v·ªõi router.delete('/images/:filename'
                  ///c·∫ßn gfs v√† gridfsBucket ‚úÖ
              //N·∫øu c√≥ req.file t·ªõi th√¨ n·∫øu user mu·ªën update h√¨nh, th√¨ h√¨nh c≈© li√™n k·∫øt v·ªõi product ph·∫£i ƒë∆∞·ª£c b·ªè
              if(image){
                  //d√πng imageFilename c·ªßa h√¨nh kh√¥ng c·∫ßn hi·ªán n·ªØa ƒë·ªÉ x√≥a file c√≥ filename tr√πng imageFilename
                  gfs.files.findOne({filename:product.imageFilename},(err,file)=>{
                        if(!file || file.length === 0){
                            console.log("Kh√¥ng th·∫•y file n√†y")
                            return res.status(404).json({
                                err:'No file exists'
                            })
                        } 
                        //File exists
                        console.log("ƒê√£ t√¨m th·∫•y file trong MongoDB"); //ok
                        console.log("image mu·ªën delete c√≥ id l√†: ",file._id);
                        gridfsBucket.delete(file._id)
                              .then(result=>{
                                  console.log("ƒë√£ x√≥a file h√¨nh"); //ok
                              })
                              .catch(err=>console.log(err));
                  })

                  //N·∫øu ng∆∞·ªùi d√πng upload h√¨nh m·ªõi th√¨ m·ªõi c·∫≠p nh·∫≠t
                  product.imageFilename = image.filename; 
                }
              

                  //t·ª´ req.file nh·∫≠n ƒë∆∞·ª£c, c√≥ th·ªÉ c·∫≠p nh·∫≠t imageFilename cho product
                  product.title = updatedTitle;
                  product.price = updatedPrice;
                  product.description = updatedDesc;

                  
                  

                  //üòàPROBLEM: khi ng∆∞·ªùi d√πng kh√¥ng mu·ªën update h√¨nh, th√¨ req.file undefined th√¨ kh√¥ng h√¨nh n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t , trong khi h√¨nh c≈© b·ªã b·ªè ƒëi. Khi ƒë√≥ display kh√¥ng c√≥ h√¨nh n√†o h·∫øt

                  

                  //c·∫≠p nh·∫≠t nh·ªØng thay ƒë·ªïi v√†o CSDL
                  //https://masteringjs.io/tutorials/mongoose/update
                  //save() is a method on a document, which means you must have a document to save
                  return product.save().then(result => {   
                    console.log('UPDATED PRODUCT!');
                    res.redirect('/'); // '/admin/products' s·∫Ω th·∫•y nhi·ªÅu console log n√™n kh√≥ theo d√µi
                  })
              })
              .catch(err => console.log(err))
}            

exports.getProducts = (req, res, next) => {
   //B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán .skip(req.query).limit() ch·ªó n√†y ƒë·ªÉ t√≠nh to√°n ph√¢n trang gi√∫p gi·∫£m l∆∞·ª£ng l·ªõn d·ªØ li·ªáu 10000 SP ƒë·ªï v√†o l√†m ng∆∞·ªùi d√πng ch·ªù l√¢u
  Product.find({ userId: req.user._id })//VD: t√†i kho·∫£n email vietkhang92@gmail.com ch∆∞a t·∫°o products n√†o, n√™n trang Admin products b√°o No products found!, c√≤n t√†i kho·∫£n test3@test.com 123456 t·∫°o r·∫•t nhi·ªÅu sp n√™n Admin Products hi·ªÉn th·ªã ch√∫ng
    // gives us the documents and not just a cursor 
    // .select('title price -_id')
    // .populate('userId', 'name')
    .then(products => {
      console.log("products s·∫Ω tr√¨nh b√†y ·ªü trang /admin/products",products);
      res.render('admin/products', {
        products: products,
        //imageFileName kh√¥ng c·∫ßn v√¨ n√≥ c√≥ trong t·ª´ng product
        pageTitle: 'Admin Products',
        path: '/admin/products'
      });
    })
    .catch(err => console.log(err));
};

exports.deleteProduct = (req, res, next) => {
  // v·ªõi http delete verb th√¨ Kh√¥ng extract productId t·ª´ req.body ƒë∆∞·ª£c n·ªØa because delete request as it turns out also are not allowed to have a request body
  //We cannot send it in the request body because delete requests don't have a body
  const prodId = req.params.productId;
  //logic here afterwards will still work,

  //x√≥a SP th√¨ x√≥a lu√¥n h√¨nh ·∫£nh c·ªßa product ƒë√≥ tr√™n server trong public/khoHinhPublic
    ///b·∫±ng c√°ch g·ªçi h√†m async , dƒ© nhi√™n ph·∫£i theo sau l√† then().catch(), n·∫øu kh√¥ng d·ªÖ g·∫∑p Promise<pending>
  Product.findById(prodId)
         .then(product=>{
            //n·∫øu kh√¥ng t·ªìn t·∫°i product th√¨ ch·ªß ƒë·ªông t·∫°o m·ªôt error object ƒëi k√®m error message
            if(!product){
              //cho control c·ªßa ch∆∞∆°ng tr√¨nh t·ªõi controller k·∫ø ti·∫øp v√† tho√°t h√†m controller n√†y (kh√¥ng tr·ªü l·∫°i th·ª±c thi code ph√≠a sau n·ªØa, v√¨ b√¨nh th∆∞·ªùng sau d√≤ng next() s·∫Ω th·ª±c thi c√°c d√≤ng ti·∫øp theo next)
              return next(new Error("Product not found!"))
            }
            //x√≥a h√¨nh t∆∞∆°ng ·ª©ng c·ªßa SP mu·ªën x√≥a
            fileHelper.deleteFile(product.imageUrl) //g·ªçi h√†m ASYNC fs.unlink(filePath). Khi n√†o th·ª±c thi xong deleteFile th√¨ kh√¥ng quan tr·ªçng, h√†m n√†y tr·∫£ ra void ch·ª© kh√¥ng tr·∫£ ra Promise; n·∫øu t√¨m th·∫•y file trong public th√¨ x√≥a, kh√¥ng th·∫•y th√¨ tho√°t h√†m b·∫±ng l·ªánh 'return;'
            //c·ª© return b·∫±ng c√°ch g·ªçi h√†m async deleteOne x√≥a SP trong CSDL : 
            //I delete the image and I Simultaneously start deleting the product itself.
            return Product.deleteOne({ _id: prodId, userId: req.user._id }); //ƒëi·ªÅu n√†y ƒë·∫£m b·∫£o t√¨m Product.findById ƒë∆∞·ª£c th√¨ x√≥a v√† tho√°t h√†m , kh√¥ng ƒë∆∞·ª£c th√¨ tho√°t h√†m v·ªõi msg "Product not found". H√†m n√†y tr·∫£ ra Promise
            /*
                üéâI should only trigger delete one here after I found this
                otherwise we have a race condition where deleting could finish before finding is finished and that would
                be bad.

                üí¢Problem: ƒëang g·ªçi h√†m async Product.findById(prodId).then().catch() ngang c·∫•p (kh√¥ng bi·∫øt h√†m n√†o s·∫Ω ra k·∫øt qu·∫£ tr∆∞·ªõc-sau) h√†m async Product.deleteOne({ _id: prodId, userId: req.user._id }).then().catch()

                üçíSolution (*): Product.findById(prodId).then(capturedProduct=>{ return Product.deleteOne({ _id: prodId, userId: req.user._id }); } ).catch()
            */

                /*
                  üí¢ Common trap: Solution (*) ƒëang sai l·ªói k·ªπ thu·∫≠t v√† s·∫Ω b·ªã b√°o l·ªói Promise<pending>
                  ‚ù§Ô∏è L√Ω do: You must call .then on the promise to capture the results regardless of the promise state (resolved or still pending). The promise will always log pending as long as its results are not resolved yet.
                     /// t∆∞∆°ng ƒë∆∞∆°ng  const variable = async deleteFile(path);  ho√†n to√†n kh√¥ng c√≥ then() s·∫Ω b·ªã server logs ra Promise<pending> 
                     /// Th·∫≠t ra n√™n l√† const variable = await deleteFile(path); sau ƒë√≥ x·ª≠ l√Ω ti·∫øp variable.then(result=>{})?? ho·∫∑c m·∫£ng th√¨ variable.foreach((doc)=>{}) , v√¨ https://stackoverflow.com/questions/62402475/assign-async-function-result-to-variable
                     /// t·∫ßm quan tr·ªçng c·ªßa keyword "await": https://stackoverflow.com/questions/53813344/assigning-result-of-async-method-to-a-variable
                        //// ‚ù§Ô∏è If you don't put await execution of existing method will continue regardless of your async method's completion status
                        ///// if you need to wait for some async operation to be completed before continuing the current method you should put await
                  üçí Solution: https://damaris-goebel.medium.com/promise-pending-60482132574d 
                               https://www.appsloveworld.com/csharp/100/1069/why-await-an-async-function-directly-not-work-without-assigning-it-to-a-task-vari      

                */
         })
         .then(() => {
              console.log('DESTROYED PRODUCT');
              //res.redirect('/admin/products');//we redirect back to admin products which is a route which will return a new html page.
              //üí¢Nh∆∞·ª£c ƒëi·ªÉm: ch·ªâ c√≥ delete SP m√† load to√†n b·ªô trang web, n√≥i c√°ch kh√°c l√† new html file 
                 ///ho√†n to√†n c√≥ th·ªÉ l√†m v·∫ßy nh∆∞ng s·∫Ω ·∫£nh h∆∞·ªüng UX
              //üçíSolution: qua Lab20.1 s·∫Ω gi·∫£i quy·∫øt trao ƒë·ªïi json th√¥i, ch·ª© kh√¥ng load c·∫£ HTML page
              //I will not redirect anymore because I'll not load a new page
              //Remember that the request triggering this action will be sent behind the scenes for the existing page, so I want to keep that existing page and therefore my response will be a response where I send json data.
              //Json data is a special format and with expressjs, I can use a json helper method to conveniently return json data and json is simply a data format that looks like a javascript object,
              //we can also set a status here of 200 maybe because for json data, this would be the default too but there since we don't redirect it and so on, where we get a status code set automatically, it would make sense to be very clear about the status code we have
              res.status(200).json({
                  message:'Success! Please note that the page was NOT reloaded, instead the existing page was updated!'
              });
              //M·ª•c ti√™u ch√≠nh v·∫´n l√† : I'll also return some json data, the question is of course which data. You simply pass a javascript object here which will then be transformed to json automatically for you
               
         })
         .catch(err=>{
              //default err handler
              // const error=new Error(err);
              // error.httpStatusCode=500;
              // return next(err);

              //I'll also not to use my default error handler above where I would load the 500 page
              //https://www.geeksforgeeks.org/http-status-codes-server-error-responses/
              //Basically, you have to identify what http statusCode should be sent from server based on your outcome of the execution.
                ///https://stackoverflow.com/questions/58288268/how-to-get-error-status-code-from-error-object
              
              //I'll also return some json data
              res.status(500).json({message:"Deleting product failed"});
         });

         //So now I have that in place and now we have two important changes,
             ///this is how we extract the params or the product ID: const prodId=req.params.productId
             /// and now we return json responses because we don't want to render a new page, we JUST WANNA RETURN SOME DATA: res.status(200).json({}) v√† res.status(500).json({})
}
