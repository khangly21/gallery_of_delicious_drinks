const express = require('express');
const { check, body } = require('express-validator/check');
//vs const { body } = require('express-validator');  ?

//ch√∫ √Ω : Kh√¥ng c·∫ßn isAuth 

const authController = require('../controllers/auth');
const User = require('../models/user');

const router = express.Router();

router.get('/login', authController.getLogin);

router.get('/signup', authController.getSignup);

router.post(
  '/login',
  [
    body('email')
      .isEmail()
      .withMessage('Please enter a valid email address.')
      .normalizeEmail() //üåê
      //tr·∫£ v·ªÅ string||false. THIS does not validate if an input is an email, so you shoudl use isEmail beforehand
    , //isEmail() kh√¥ng th·ªèa th√¨ d·ª´ng , kh√¥ng check ti·∫øp password
    body('password', 'Password has to be valid.') //message l√†m tham s·ªë th·ª© hai, v√¨ withMessage customize h∆°n
      .isLength({ min: 5 })
      .isAlphanumeric()
      .trim()  //üåê
      
      //we could trim the password to remove excess whitespace
  ],
  authController.postLogin  //n·∫øu ƒë·ªÉ isAuth tr∆∞·ªõc postLogin s·∫Ω c√≥ g√¨ x·∫£y ra??
);

router.post(
  '/signup',
  [
    check('email')
      .isEmail()
      .withMessage('Please enter a valid email.')
      
      .custom((value, { req }) => {
        // if (value === 'test@test.com') {
        //   throw new Error('This email address is forbidden.');
        // }
        // return true;
        return User.findOne({ email: value }).then(userDoc => {
          if (userDoc) {
            return Promise.reject(
              'E-Mail exists already, please pick a different one.'   //üëàüëà important message
              //gi·∫£ s·ª≠ sign up email:"test3@test.com" , pass:222222 s·∫Ω tung msg n√†y ra 
            );
          }
        });
      })
      
      .normalizeEmail() //üåê
      ,

    body(
      'password',
      'Please enter a password with only numbers and text and at least 5 characters.'
    )
      .isLength({ min: 5 })
      .isAlphanumeric()
      .trim() //üåê
      ,
      
    body('confirmPassword').trim().custom((value, { req }) => {   //kh√¥ng c√≥ { } bao quanh req ƒë∆∞·ª£c kh√¥ng?
      if (value !== req.body.password) {
        throw new Error('Passwords have to match!');
        /*
            The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.
        */
      }
      return true;
    })
  ],
  authController.postSignup
);

router.post('/logout', authController.postLogout);

router.get('/reset', authController.getReset);

router.post('/reset', authController.postReset);

router.get('/reset/:token', authController.getNewPassword);

router.post('/new-password', authController.postNewPassword);

module.exports = router;
