//path
const path = require('path');
/*
// Old Way:
const conn = mongoose.createConnection(youConnectionURI);
const gfs = require('gridfs-store')(conn.db);
gfs.collection('yourBucketName');

// New Way:
const conn = mongoose.createConnection(youConnectionURI);
const gridFSBucket = new mongoose.mongo.GridFSBucket(conn.db, {bucketName: 'yourBucketName'});


*/
const mongoose = require('mongoose');
//MONGODB_URI v·ªõi c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë∆∞·ª£c Express app ƒë·ªçc t·ª´ b√™n ngo√†i (file nodemon.json khi dev env)
const MONGODB_URI =`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@khangserver0.w0azxjp.mongodb.net/${process.env.MONGO_DEFAULT_DATABASE}`;
//crypto
const crypto=require('crypto');
//multer
const multer= require('multer');
//GridFsStorage, GRIDJS-STREAM
const {GridFsStorage}= require('multer-gridfs-storage');
Grid=require('gridfs-stream');
const methodOverride = require('method-override');

const express = require('express');
const Product = require('../models/product'); //ok

//const conn=mongoose.createConnection(MONGODB_URI, { useNewUrlParser: true });
//global reusable variables 
const promise=mongoose.connect(MONGODB_URI, { useNewUrlParser: true }); //tr·∫£ v·ªÅ mongoose.Connection
const conn = mongoose.connection;
//const gidfsStore = require('gridfs-store')(conn.db); //warning: deprecated, this is not needed any more
let gfs,gridfsBucket;

////GridStore is deprecated. You can use the GridFSBucket instance to call read and write operations on the files in your bucket.
conn.once('open',()=>{
    console.log(`MongoDB connection is opened to database ${process.env.MONGO_DEFAULT_DATABASE}`);
    //conn.db is mongodb.Db instance, set when the connection is opened
    
    
    //hover s·∫Ω th·∫•y GridFSBucket() l√† constructor for a streaming GridFS interface
    //H·ªñ TR·ª¢ stream h√¨nh ·∫£nh c√πng stream response t·ªõi browser (sau khi file t·ªõi ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† m·ªôt image)
    gridfsBucket = new mongoose.mongo.GridFSBucket(conn.db, {
        bucketName: 'tailenhinhanh' //l√∫c n√†y ch∆∞a th·∫•y collection "tailenhinhanh" trong MongoDB. Bucket name ph·∫£i matches v·ªõi collection name
    });

    gfs=Grid(conn.db,mongoose.mongo); 
    gfs.collection('tailenhinhanh'); //l√∫c n√†y ch∆∞a th·∫•y collection "tailenhinhanh" trong MongoDB
})

//import express-validator functions
const {body} =require('express-validator/check');

const adminController = require('../controllers/admin');
const isAuth = require('../middleware/is-auth');

const router = express.Router();

//API ch·ª©a m√£ y√™u c·∫ßu gridFS t√¨m file (c√≥ th·ªÉ l√† file nh·∫°c, video...) c√≥ filename n√†o ƒë√≥
//xem morgan ƒë·ªÉ bi·∫øt GET req c√≥ 404 hay 200
    ///n·∫øu 404 th√¨ l√Ω do l√† thi·∫øu /admin tr√™n url
router.get('/files/:filename',(req,res)=>{
      
  //gfs.files.findOne({filename:req.params.['filename'])
  console.log(req.params.filename)
  gfs.files.findOne({filename:req.params.filename},(err,file)=>{
      if(!file || file.length === 0){
          console.log("Kh√¥ng th·∫•y file n√†y")
          return res.status(404).json({
              err:'No file exists'
          })
      }
      //File exists
      console.log("ƒê√£ t√¨m th·∫•y file trong MongoDB")
      return res.status(200).json(file);
      //üéâhttp://localhost:5000/admin/files/27e9c4f2c70839ced81721d63a0168f3.PNG
  })
})

//API t√¨m m·ªôt file h√¨nh n√†o ƒë√≥ (ph·∫£i l·ªçc ra ƒë·ªãnh d·∫°ng ·∫£nh (ƒë·ªÅu lowercase): jpg,jpeg,gif,png,svg)
  ///https://quantrimang.com/cong-nghe/tim-hieu-ve-dinh-dang-file-khi-nao-thi-dung-jpeg-gif-va-png-116533
  ///https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
router.get('/images/:filename',(req,res)=>{
  //l·∫•y files (txt , jpg , .doc...) r·ªìi l·ªçc ra c√°c ƒë·ªãnh d·∫°ng ·∫£nh
  //d√πng gfs.files c≈©ng t∆∞∆°ng t·ª± d√πng mongoose's model
      gfs.files.findOne({filename:req.params.filename},(error,file)=>{
        if(!file || file.length === 0){
            console.log("Kh√¥ng th·∫•y file n√†y")
            return res.status(404).json({
                err:'No file exists'
            })
        }
      
      //there is a file , but not sure this is an image
      //check to make sure it's an image , then stream the mix of response and image to browser
      //image/webp
      //image/svg+xml
      //image/png
      //image/jpeg
      //image/jpg
      //image/gif
      //image/avif
      //image/apng


      //ReferenceError: file is not defined
      if(file.contentType.toLowerCase()==='image/webp' ||
         file.contentType.toLowerCase()==='image/svg+xml'||
         file.contentType.toLowerCase()==='image/png'|| 
         file.contentType.toLowerCase()==='image/jpeg'|| 
         file.contentType.toLowerCase()==='image/jpg' ||
         file.contentType.toLowerCase()==='image/gif'||
         file.contentType.toLowerCase()==='image/avif'|| 
         file.contentType.toLowerCase()==='image/apng'
      ){
          console.log("This file is an image!");
          //·ª©ng d·ª•ng gridfsBucket ƒë·ªÉ  tr·∫£ v·ªÅ cho browser (l√∫c n√†y c√≥ th·ªÉ comment out cho gridfsBucket ho·∫°t ƒë·ªông)
          const readstream = gridfsBucket.openDownloadStream(file._id);
          readstream.pipe(res); //h√≤a image stream v√†o response stream ƒë·ªÉ h∆∞·ªõng t·ªõi browser
      }else{
          console.log("Not an image")
          res.status(404).json({err:'not an image'}); 
      }

      //DEMO:üéâ http://localhost:5000/admin/images/27e9c4f2c70839ced81721d63a0168f3.PNG
          ///th·∫•y tr·∫£ v·ªÅ trang to√†n binary characters, nh∆∞ng khi img tag href n√≥ th√¨ s·∫Ω tr·∫£ ra h√¨nh ·∫£nh r√µ n√©t
    })
})

// /admin/add-product => GET
router.get('/add-product', isAuth, adminController.getAddProduct);

// /admin/products => GET
//gi·∫£ s·ª≠ form POST t·ªõi action='/admin/products' th√¨ c≈©ng l√† http://localhost:5000/admin/products nh∆∞ng "No products found" v√¨ method POST , gi·∫£i ph√°p l√† t·ªõi POST /edit-product r·ªìi res.redirect t·ªõi GET /admin/products
router.get('/products', isAuth, adminController.getProducts);

// /admin/add-product => POST
//th√™m middleware multer ƒë·ªÉ x·ª≠ l√Ω uploaded file v·ªõi format multipart/form-data
//t√™n c·ªßa input type="file" l√†: "image"

//storage engine
const storage=new GridFsStorage({
    //url:MONGODB_URI,
    db:promise,
    file:(req,file)=>{
      return new Promise((resolve, reject) => {
        crypto.randomBytes(16, (err, buf) => {
          if (err) {
            return reject(err);
          }
          const filename = buf.toString('hex') + path.extname(file.originalname);
         
          const fileInfo = {
            filename: filename,
            bucketName: 'tailenhinhanh' //bucketName should match the collection name
          };
          resolve(fileInfo); //resolve the Promise with that fileInfo
        });
      });
    }
})
const upload = multer({ storage });

//  /admin/add-product
router.post('/add-product', upload.single('image'), [
    //https://stackoverflow.com/questions/50767728/no-errors-with-express-validator-isempty
        /// v√¨ sao khi price input c√≥ value='' th√¨ b·ªã msg='Invalid value' ??
    //input name with validation
    body('title')
       //.isAlphanumeric()   //n·∫øu c√≥ validator n√†y th√¨ "First book" l√† invalid v√¨ ·ªü gi·ªØa c√≥ space, quy ƒë·ªãnh ch·ªâ c√≥ text v√† numbers
       .toString()
       .isLength({min:3})
       .trim(),
    //built-in validator that checks whether this input named "imageUrl" fulfills the characteristics of a url
    //body('imageUrl').isURL(), //VD n·∫øu g·ª≠i file h√¨nh req.body.image v√†o imput's name "imageUrl" th√¨ s·∫Ω b·ªã b√°o l·ªói b·∫±ng default msg "Invalid value" do kh√°c isUrl
       /// sau n√†y c·ªë √Ω ƒë·∫∑t imageUrl = image.path th√¨ isURL()= false n√™n kh√¥ng check body('imageUrl').isURL(); v√† Model products v·∫´n gi·ªØ l·∫°i imageUrl ki·ªÉu String
    body('price')
        //.isEmpty(),  //n·∫øu price empty thi·ªát th√¨ isEmpty=true th√¨ express validator ok, nh∆∞ng mongoose model validator kh√¥ng ok
        .isFloat(),    //n·∫øu price empty th√¨ express validator th·∫•y value="" s·∫Ω msg='Invalid value', tr∆∞·ªõc khi mongoose model validator kh√¥ng ok
        //to ensure that this has to have some decimal places. // isNumeric() = isFloat() + isInt()  ??
    body('description')
        .isLength({min:5,max:200})
        .trim()
    ] 
    ,isAuth, adminController.postAddProduct
);

router.get('/edit-product/:productId', isAuth, adminController.getEditProduct); 
//vi·ªác d√πng /:productId cho ph√©p router.get('/edit-product/:productId') re-render t·ªõi router.get('/edit-product')

//post /admin/add-product c√≥ upload image b·∫±ng multer v√† c√≥ middleware upload.single('image'). Do ƒë√≥ post /admin/edit-product c≈©ng ph·∫£i c√≥ v√¨ d√πng chung image field
router.post('/edit-product', upload.single('image') , [
    //https://stackoverflow.com/questions/50767728/no-errors-with-express-validator-isempty

    //title with validation
    body('title')
       //.isAlphanumeric()  //s·∫Ω kh√¥ng ch·ªãu whitespace gi·ªØa c√°c ch·ªØ
       .toString()
       .isLength({min:3})
       .trim(),

    //built-in validator that checks whether this fulfills the characteristics of a url
    //‚ù§Ô∏èbody('imageUrl').isURL(),

    body('price').isFloat(),   
    //to ensure that this has to have some decimal places.
    // isNumeric() = isFloat() + isInt()  ??
    //Tuy nhi√™n khi kh√¥ng nh·∫≠p g√¨ cho "price" input th√¨ b√°o l·ªói. WHY??

    body('description')
         .isLength({min:5,max:1000}).withMessage("y√™u c·∫ßu s·ªë ch·ªØ min 5 v√† max 200") //thay v√¨ ch·ªâ nh·∫≠n m·∫∑c ƒë·ªãnh "Invalid value" kh√¥ng bi·∫øt sai ·ªü validation n√†o
         .trim() // x√≥a c√°c whitespace (do click thanh Space) tr∆∞·ªõc v√† sau
    // c√°i kh√≥ l√† khi c√≥ error trong express-validator th√¨ ch·ªâ b√°o m·∫∑c ƒë·ªãnh msg='Invalid value' ch·ª© kh√¥ng bi·∫øt sai ch·ªó n√†o

    //https://stackoverflow.com/questions/37531458/express-validator-show-only-one-validation-error-message-of-a-field
    ], 
    isAuth, 
    adminController.postEditProduct
    );

router.delete('/product/:productId', isAuth, adminController.deleteProduct);
//OK, HTTP method/verb n√†y ƒë·ªÉ delete, nh∆∞ng ƒë√≥ ch·ªâ l√† semantic , b·∫°n c≈©ng d√πng POST ƒë∆∞·ª£c, vi2 you can in general use any http verb to do anything because you define with your serve side logic what will happen
//But v·ªÅ ng·ªØ nghƒ©a, it makes sense to try to be clear about your intention and there is a delete verb, we can now use it so why wouldn't we use it?
//because 'delete' http verb requests can have dynamic url parameter :productId.
//now we can extract that information from our url, kh√¥ng extract n√≥ t·ª´ req.body nh∆∞ post verb ƒë∆∞·ª£c n·ªØa ‚úçÔ∏è
//s·ª≠a lu√¥n t√™n c·ªßa controller action v√¨ kh√¥ng d√πng post verb n·ªØa, deleteProduct makes more sense 
// isAuth middleware I will keep in place though (gi·ªØ nguy√™n v·ªã tr√≠)

// DELETE /admin/images/:id
router.delete('/images/:filename',(req,res)=>{
    console.log("filename tr√™n ƒë∆∞·ªùng d·∫´n l√†: ",req.params.filename)
    //let file_id=mongoose.Types.ObjectId(req.params.id.trim()); 
    //Error: Argument passed in must be a single String of 12 bytes or a string of 24 hex characters
       ///L√Ω do: kh√¥ng cho filename (vvvvv.PNG) v√†o mongoose.Types.ObjectId ƒë∆∞·ª£c b·∫±ng c√°ch let file_name=mongoose.Types.ObjectId(req.params.filename.trim()); 
    //Solution: D·ª±a v√†o filename trong product ƒë·ªÉ li√™n k·∫øt t·ªõi ID c·ªßa h√¨nh c√≥ filename ƒë√≥
       ///https://stackoverflow.com/questions/60896129/delete-files-and-chunk-with-gridfsbucket
      
    //x√≥a ·∫£nh tr√™n MongoDB's GridFS
    gfs.files.findOne({filename:req.params.filename},(err,file)=>{
        if(!file || file.length === 0){
            console.log("Kh√¥ng th·∫•y file n√†y")
            return res.status(404).json({
                err:'No file exists'
            })
        }
        //File exists
        console.log("ƒê√£ t√¨m th·∫•y file trong MongoDB");
        console.log("image mu·ªën delete c√≥ id l√†: ",file._id);
        //ƒëi v√†o fs.files ƒë·ªÉ t√¨m file c√≥ id tr√™n r·ªìi delete
        //K·∫øt qu·∫£: "8cdb2fc5226cec522db56d77819b1ae7.PNG" l√† filename c·∫ßn x√≥a t∆∞∆°ng ·ª©ng file id l√† 63759833291ca411346657bf
        //x√≥a xong trong fs.files th√¨ fs.chunks c≈©ng t·ª± x√≥a do c√≥ reference t·ªõi
        //üí¢Problem: products collection ch∆∞a x√≥a product c√≥ reference l√† imageFilename="8cdb2fc5226cec522db56d77819b1ae7.PNG"
        //üéèSolution: d√πng Product mongoose model ƒë·ªÉ x√≥a product n√†o c√≥ filename tr√™n
        
        //https://www.geeksforgeeks.org/mongoose-queries-model-deleteone-api/  üëâ v√¨ sao kh√¥ng ƒë∆∞·ª£c?
        //https://www.geeksforgeeks.org/mongoose-findoneanddelete-function/
        //mongoose findOneAndUpdate
        gridfsBucket.delete(file._id)
                    .then(result=>{
                        console.log("ƒë√£ x√≥a file h√¨nh"); //ok
                        console.log("filename c·ªßa SP c·∫ßn x√≥a: ",req.params.filename)
                        Product.findOneAndDelete({imageFilename:req.params.filename},function(err,doc){
                            console.log("destroyed product successfully");
                            res.redirect('/admin/products'); 
                        })
                               
                    })
                    //C√ÅCH 2
                    // .then(result=>{
                    //     console.log(result);
                    //     console.log("destroyed product successfully");
                    //     //res.redirect('/admin/products'); 
                        
                    // })
                    .catch(err=>{
                        console.log(err);
                    })
        
        
    })
    
    
   
    
})

module.exports = router;
